# -*- coding: utf-8 -*-
"""Hafta9 GedizGorsel2.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1Mc5oQpATYHFEWqGTQXw_ge_6FoeOP9Q2
"""

import pandas as pd

dataFrame = pd.read_excel("bisiklet_fiyatlari.xlsx")

dataFrame.head()

import seaborn as sbn
import matplotlib.pyplot as plt

sbn.pairplot(dataFrame)

"""Veriyi Test ve Train(Eğitim) verisi olarak ikiye ayıralım"""

from sklearn.model_selection import train_test_split

# y = wx + b 
# y -> etiket (label)

y = dataFrame["Fiyat"].values

#x-> özellik(feature)

x = dataFrame[["BisikletOzellik1","BisikletOzellik2"]].values

x_train, x_test, y_train, y_test = train_test_split(x,y,test_size=0.30,random_state=43)

x_train.shape

x_test.shape

y_train.shape

y_test.shape

from sklearn.preprocessing import MinMaxScaler

scaler = MinMaxScaler()

scaler.fit(x_train)

x_train = scaler.transform(x_train)
x_test = scaler.transform(x_test)

x_train

import tensorflow as tf

from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense

model = Sequential()

model.add(Dense(4,activation="relu"))
model.add(Dense(4,activation="relu"))
model.add(Dense(4,activation="relu"))

model.add(Dense(1))
model.compile(optimizer = "rmsprop", loss="mse")

model.fit(x_train,y_train,epochs=250)

loss = model.history.history["loss"]

sbn.lineplot(x=range(len(loss)),y=loss)

trainLoss = model.evaluate(x_train,y_train, verbose=0)

testLoss = model.evaluate(x_test,y_test,verbose=0)

trainLoss

testLoss

testTahminleri = model.predict(x_test)

testTahminleri

tahminDf = pd.DataFrame(y_test,columns=["Gerçek Y"])

tahminDf

testTahminleri = pd.Series(testTahminleri.reshape(300,))

testTahminleri

tahminDf = pd.concat([tahminDf,testTahminleri],axis=1)

tahminDf

tahminDf.columns = ["Gerçek Y", "Tahmin Y"]

tahminDf

sbn.scatterplot(x = "Gerçek Y", y = "Tahmin Y", data = tahminDf)

from sklearn.metrics import mean_absolute_error, mean_squared_error

mean_absolute_error(tahminDf["Gerçek Y"],tahminDf["Tahmin Y"])

mean_squared_error(tahminDf["Gerçek Y"],tahminDf["Tahmin Y"])

dataFrame.describe()

yeniBisikletOzellikleri = [[1751,1750]]

yeniBisikletOzellikleri = scaler.transform(yeniBisikletOzellikleri)

model.predict(yeniBisikletOzellikleri)

from tensorflow.keras.models import load_model

model.save("bisiklet_modeli.h5")

sonradancagrilanModel = load_model("bisiklet_modeli.h5")

sonradancagrilanModel.predict(yeniBisikletOzellikleri)

